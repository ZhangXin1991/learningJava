package BiXiangDong.Network_Learning;

public class Test3_0_TextTransitionText_Demo {
    public static void main(String[] args) {
        /**
         * 需求:  创建一个英文大写转换服务器
         *  客户端输入字母数据, 发送给服务端
         *  服务端收到后显示在控制台, 并将该数据转换成大写返回给客户端
         *  直到客户端输入"over"转换结束.
         *
         * 分析:
         *  有客户端, 有服务端. 使用TCP传输
         *      1, 创建客户端:
         *          - 创建socket端点
         *          - 获取客户端网络输出流
         *          - 获取客户端输出源,
         *              此处源为 读取键盘录入,
         *              所以还要创建字节读取流读取键盘录入
         *          - 将客户端输出源的数据通过客户端网络输出流发送给服务端
         *          - 获取客户端网络输入流, 用于获取服务端发送过来的数据
         *          - 创建字节读取流, 用于读取网络输入流的数据(服务端发送来的数据)

         *      2, 创建服务端:
         *          - 创建serverSocket端点
         *          - 获取客户端连接对象, 并接收同意接受客户端对象连接
         *          - 获取客户端连接对象的网络输入流
         *          - 创建字节读取流读取对象用于读取客户端的网络输入流的数据
         *          - 将这些数据转换为大写
         *          - 创建客户端连接对象的网络输出流
         *          - 创建字节输出流用于输出给客户端的网络输出流输出数据, 并将这些转为大写的数据输出
         *
         *      注意:
         *          服务器端与客户端之间的流互相发送数据时, 一定要加结束标记,
         *          如:
         *              服务器端读取客户端的网络输入流时, 用readLine();方法中的换行标记来确定每次传输的数据结束
         *                  每次传输的数据结束后会将数据保存至字节流容器中,
         *                  所以需要用刷新方法来将字节流容器中的数据发送
         *                  可以使用Socket类中的shutdownInput();方法禁用此套接字的输出流
         *              客户端在用网络输出流发送给服务端数据时, 用readLine();方法中的换行标记来确定每次传输的数据结束
         *                  每次传输的数据结束后会将数据保存至字节流容器中,
         *                  所以需要用刷新方法来将字节流容器中的数据发送
         *                  可以使用Socket类中的shutdownOutput();方法标记此套接字的输入流至于"流的末尾".
         */
        //  见 :
        //      Test3_1_client_socket
        //      Test3_2_server_socket
    }
}

